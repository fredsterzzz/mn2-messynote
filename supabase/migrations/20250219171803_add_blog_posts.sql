-- Create blog_posts table
create table if not exists public.blog_posts (
    id bigint generated by default as identity primary key,
    title text not null,
    excerpt text,
    content text,
    category text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    author_id uuid references auth.users(id) on delete set null
);

-- Enable RLS
alter table public.blog_posts enable row level security;

-- Create policies
create policy "Blog posts are viewable by everyone" on public.blog_posts
    for select using (true);

create policy "Blog posts can be created by admin" on public.blog_posts
    for insert with check (auth.uid() in (select id from auth.users where email = 'fredsterzzz@gmail.com'));

create policy "Blog posts can be updated by admin" on public.blog_posts
    for update using (auth.uid() in (select id from auth.users where email = 'fredsterzzz@gmail.com'));

create policy "Blog posts can be deleted by admin" on public.blog_posts
    for delete using (auth.uid() in (select id from auth.users where email = 'fredsterzzz@gmail.com'));

-- Create function to automatically set updated_at
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

-- Create trigger for updated_at
create trigger set_updated_at
    before update on public.blog_posts
    for each row
    execute procedure public.handle_updated_at();
